{"ast":null,"code":"var _jsxFileName = \"/Users/alinasytnik/Desktop/calculator/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport ResultView from './components/ResultView';\nimport Keyboard from './components/Keyboard';\nlet output = '';\nlet history = '';\nlet symbols = ['*', '-', '+', '/'];\n\nfunction App() {\n  const [state, setState] = useState({\n    history: '',\n    displayValue: ''\n  });\n\n  const updateState = () => {\n    setState({\n      history: history.toString(),\n      displayValue: output.toString()\n    });\n  }; // ONCLICK BUTTON CLICK\n\n\n  const onClick = (id, keyType, value) => {\n    // CONVERT TO STRING\n    output = output.toString(); // GET LAST INPUT VALUE\n\n    let lastInput = output.slice(-1);\n\n    switch (keyType) {\n      case 'function':\n        functionKey(id, lastInput);\n        break;\n\n      case 'operator':\n        operatorKey(value, lastInput);\n        break;\n\n      case 'number':\n        numberKey(value, lastInput);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const functionKey = (id, lastInput) => {\n    const resetOutput = display => {\n      // RESET VALUES\n      history = '';\n      output = ''; // Update state if display == true\n\n      display && updateState();\n    };\n\n    const calculate = lastInput => {\n      // CHECK IF LAST INPUT IS NUMBER AND OUTPUT IS NOT EMPTY\n      if (!symbols.includes(lastInput) && output) {\n        try {\n          history = output;\n          output = eval(output.replace(/%/g, '*0.01'));\n          output = Number.isInteger(output) ? output : output.toFixed(3);\n          updateState(); // UPDATE HISTORY TO RESULT AND RESET OUTPUT\n\n          history = output;\n          output = '';\n        } catch (error) {\n          output = 'Error';\n          updateState();\n          resetOutput();\n        }\n      }\n    };\n\n    switch (id) {\n      case 'clear':\n        resetOutput(true);\n        break;\n\n      case 'clearBack':\n        output = output.slice(0, -1);\n        updateState();\n        break;\n\n      case 'calc':\n        calculate(lastInput);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const operatorKey = (value, lastInput) => {\n    // PREVENT STARTING WITH AN OPERATOR\n    if (output === '' && value !== '-') {\n      return;\n    } else {\n      // REPLACE OPERATOR SYMBOL IF LASTINPUT IS OPERATOR\n      symbols.includes(lastInput) ? output = output.slice(0, -1) + value : output += value;\n    }\n\n    updateState();\n  };\n\n  const numberKey = (value, lastInput) => {\n    // PREVENT ENTERING . OR % MULTIPY TIMES\n    if (value === '.' || value === '%') {\n      // PREVENT STARTING WITH '%'\n      if (output === '' && value === '%') return;\n      lastInput === '.' || lastInput === '%' || (output += value);\n    } else {\n      output += value;\n    }\n\n    updateState();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(ResultView, {\n    history: state.history,\n    output: state.displayValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Keyboard, {\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/alinasytnik/Desktop/calculator/src/App.js"],"names":["React","useState","ResultView","Keyboard","output","history","symbols","App","state","setState","displayValue","updateState","toString","onClick","id","keyType","value","lastInput","slice","functionKey","operatorKey","numberKey","resetOutput","display","calculate","includes","eval","replace","Number","isInteger","toFixed","error"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport ResultView from './components/ResultView';\nimport Keyboard from './components/Keyboard';\n\nlet output = '';\nlet history = '';\nlet symbols = ['*', '-', '+', '/'];\n\nfunction App() {\n\tconst [state, setState] = useState({\n\t\thistory: '',\n\t\tdisplayValue: ''\n\t});\n\tconst updateState = () => {\n\t\tsetState({ history: history.toString(), displayValue: output.toString() });\n\t};\n\n\t// ONCLICK BUTTON CLICK\n\tconst onClick = (id, keyType, value) => {\n\t\t// CONVERT TO STRING\n\t\toutput = output.toString();\n\t\t// GET LAST INPUT VALUE\n\t\tlet lastInput = output.slice(-1);\n\n\t\tswitch (keyType) {\n\t\t\tcase 'function':\n\t\t\t\tfunctionKey(id, lastInput);\n\t\t\t\tbreak;\n\t\t\tcase 'operator':\n\t\t\t\toperatorKey(value, lastInput);\n\t\t\t\tbreak;\n\t\t\tcase 'number':\n\t\t\t\tnumberKey(value, lastInput);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t};\n\tconst functionKey = (id, lastInput) => {\n\t\tconst resetOutput = display => {\n\t\t\t// RESET VALUES\n\t\t\thistory = '';\n\t\t\toutput = '';\n\t\t\t// Update state if display == true\n\t\t\tdisplay && updateState();\n\t\t};\n\t\tconst calculate = lastInput => {\n\t\t\t// CHECK IF LAST INPUT IS NUMBER AND OUTPUT IS NOT EMPTY\n\t\t\tif (!symbols.includes(lastInput) && output) {\n\t\t\t\ttry {\n\t\t\t\t\thistory = output;\n\t\t\t\t\toutput = eval(output.replace(/%/g, '*0.01'));\n\t\t\t\t\toutput = Number.isInteger(output) ? output : output.toFixed(3);\n\t\t\t\t\tupdateState();\n\t\t\t\t\t// UPDATE HISTORY TO RESULT AND RESET OUTPUT\n\t\t\t\t\thistory = output;\n\t\t\t\t\toutput = '';\n\t\t\t\t} catch (error) {\n\t\t\t\t\toutput = 'Error';\n\t\t\t\t\tupdateState();\n\t\t\t\t\tresetOutput();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tswitch (id) {\n\t\t\tcase 'clear':\n\t\t\t\tresetOutput(true);\n\t\t\t\tbreak;\n\t\t\tcase 'clearBack':\n\t\t\t\toutput = output.slice(0, -1);\n\t\t\t\tupdateState();\n\t\t\t\tbreak;\n\t\t\tcase 'calc':\n\t\t\t\tcalculate(lastInput);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t};\n\tconst operatorKey = (value, lastInput) => {\n\t\t// PREVENT STARTING WITH AN OPERATOR\n\t\tif (output === '' && value !== '-') {\n\t\t\treturn;\n\t\t} else {\n\t\t\t// REPLACE OPERATOR SYMBOL IF LASTINPUT IS OPERATOR\n\t\t\tsymbols.includes(lastInput)\n\t\t\t\t? (output = output.slice(0, -1) + value)\n\t\t\t\t: (output += value);\n\t\t}\n\t\tupdateState();\n\t};\n\tconst numberKey = (value, lastInput) => {\n\t\t// PREVENT ENTERING . OR % MULTIPY TIMES\n\t\tif (value === '.' || value === '%') {\n\t\t\t// PREVENT STARTING WITH '%'\n\t\t\tif (output === '' && value === '%') return;\n\t\t\tlastInput === '.' || lastInput === '%' || (output += value);\n\t\t} else {\n\t\t\toutput += value;\n\t\t}\n\t\tupdateState();\n\t};\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<ResultView history={state.history} output={state.displayValue} />\n\t\t\t\t<Keyboard onClick={onClick} />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}